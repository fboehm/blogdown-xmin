<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Packages on Frederick Boehm&#39;s Professional Website</title>
    <link>/categories/packages/</link>
    <description>Recent content in Packages on Frederick Boehm&#39;s Professional Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Feb 2018 15:47:56 +0000</lastBuildDate>
    
	<atom:link href="/categories/packages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Travis-CI and R packages: What to do when your Travis-CI build takes too long</title>
      <link>/post/2018/02/01/travis-ci-and-r-packages-what-to-do-when-your-travis-ci-build-takes-too-long/</link>
      <pubDate>Thu, 01 Feb 2018 15:47:56 +0000</pubDate>
      
      <guid>/post/2018/02/01/travis-ci-and-r-packages-what-to-do-when-your-travis-ci-build-takes-too-long/</guid>
      <description>I use Travis-CI with my R packages on Github. By doing so, unit tests for my package are run each time I add a commit to my Github repository.
I recently encountered for the first time an error that results from my R package vignette taking too long to build. I was aware that the package vignette would take a long time - about 20 to 30 minutes - to build, but I hadn’t realized that Travis would return an error because of this.</description>
    </item>
    
    <item>
      <title>Using `dplyr` functions in my R package</title>
      <link>/post/2017/09/11/using-dplyr-functions-in-my-r-package/</link>
      <pubDate>Mon, 11 Sep 2017 14:51:29 +0000</pubDate>
      
      <guid>/post/2017/09/11/using-dplyr-functions-in-my-r-package/</guid>
      <description>Background I wrote the following function for use in my pleiotropy R package.
calc_lod &amp;lt;- function(data, n_mouse){ # define log10detrss0 log10detrss0 &amp;lt;- dplyr::filter(data, marker1 == marker2) pre1 &amp;lt;- dplyr::group_by(data, marker1) profile1 &amp;lt;- dplyr::summarise(pre1, profile = min(log10detrss)) pre2 &amp;lt;- dplyr::group_by(data, marker2) profile2 &amp;lt;- dplyr::summarise(pre2, profile = min(log10detrss)) return(tibble::tibble(lod1 = - n_mouse * (profile1$profile - min(log10detrss0$log10detrss)) / 2, lod2 = - n_mouse * (profile2$profile - min(log10detrss0$log10detrss))/ 2, joint = - n_mouse * (log10detrss0$log10detrss - min(log10detrss0$log10detrss)) / 2)) } I then wanted to include this function in my R package pleiotropy.</description>
    </item>
    
    <item>
      <title>Testing my R package</title>
      <link>/post/2017/07/14/testing-my-r-package/</link>
      <pubDate>Fri, 14 Jul 2017 10:52:36 +0000</pubDate>
      
      <guid>/post/2017/07/14/testing-my-r-package/</guid>
      <description>I am assembling a package that implements an EM algorithm. I want to think about how I know whether the code works. Certainly, we know that an EM algorithm requires that the likelihood be non-decreasing over consecutive iterations.
In looking at resources on testing, I found particularly helpful Karl Broman’s slides on testing R code. Hadley Wickham’s book Advanced R has a useful chapter on testing.</description>
    </item>
    
  </channel>
</rss>